import {
  AfterViewInit,
  Component,
  ElementRef,
  OnInit,
  Renderer2,
  ViewChild,
  ChangeDetectorRef,
} from '@angular/core';
import { Router } from '@angular/router';

import { AppService } from '../../app.service';

@Component({
  selector: 'app-map',
  standalone: true,
  imports: [],
  templateUrl: './map.component.html',
  styleUrl: './map.component.scss',
})
export class MapComponent {
  @ViewChild('tree1El') tree1El!: ElementRef;
  @ViewChild('tree2El') tree2El!: ElementRef;
  @ViewChild('tree3El') tree3El!: ElementRef;
  @ViewChild('tree4El') tree4El!: ElementRef;
  @ViewChild('tree5El') tree5El!: ElementRef;
  @ViewChild('tree6El') tree6El!: ElementRef;

  assetActiceList: string[] = [];

  constructor(
    private router: Router,
    public appSvc: AppService,
    private renderer: Renderer2,
    private cdr: ChangeDetectorRef
  ) {}

  onBack() {
    this.appSvc.onUseLoading();
    setTimeout(() => {
      this.router.navigateByUrl('/').then();
    }, 800);
  }

  onSelect(id: string) {
    setTimeout(() => {
      this.assetActiceList.push(id);
    }, 2000);
  }

  findAsset(id: string): boolean {
    return this.assetActiceList.includes(id);
  }

  tree1(position: number, active: boolean) {
    let path: string = '';
    if (position === 1) {
      path =
        'M95.255,131.632c-0.276-1.593-0.026-3.263-0.216-4.874c-0.102-0.855-0.538-1.014-1.356-1.073c-1.326-0.096-2.825-0.282-4.112,0.114c-0.23,0.071-0.344,0.252-0.367,0.482c-0.011,0.123-0.034,0.244-0.049,0.366c-0.017,0.021-0.037,0.034-0.052,0.06c-0.463,0.832-0.352,2.16-0.471,3.079c-0.129,0.985-0.707,2.577-0.1,3.523c0.637,0.993,2.445,0.8,3.414,0.823c0.998,0.025,2.209,0.376,3.104-0.204z';
      if (active) path = path.replace('M95.255', 'M295.255');
    } else if (position === 2) {
      path =
        'M99.887,108.272c-1.31-2.076-2.872-3.762-4.02-5.967c-1.158-2.228-2.732-4.178-4.083-6.281c-0.19-0.297-0.533-0.274-0.75-0.107c-0.116,0.025-0.226,0.097-0.302,0.233c-1.183,2.108-2.448,4.166-3.683,6.244c-1.202,2.022-2.194,4.239-3.477,6.193c-0.18,0.274-0.046,0.536,0.176,0.66c0.059,0.064,0.135,0.118,0.249,0.137c0.219,0.038,0.441,0.078,0.667,0.121c0.226,0.042,0.454,0.087,0.687,0.134c5.688,1.776,13.263-0.152,13.531-0.089c0.238-0.14,0.472-0.295,0.699-0.466c0.059-0.044,0.101-0.096,0.134-0.149z';
    } else if (position === 3) {
      path =
        'M101.77,116.541c-1.611-2.554-3.534-4.63-4.947-7.344c-1.425-2.743-3.362-5.143-5.025-7.731c-0.234-0.367-0.656-0.337-0.922-0.133c-0.144,0.032-0.278,0.12-0.373,0.287c-1.455,2.594-3.013,5.127-4.531,7.685c-1.481,2.489-2.702,5.218-4.28,7.622c-0.222,0.337-0.058,0.661,0.216,0.813c0.072,0.08,0.165,0.145,0.307,0.169c0.27,0.046,0.543,0.096,0.821,0.149c0.276,0.052,0.559,0.107,0.845,0.165c7.002,2.187,16.323-0.187,16.654-0.11c0.293-0.172,0.58-0.364,0.86-0.574c0.072-0.054,0.124-0.118,0.165-0.184z';
    } else {
      path =
        'M103.563,125.532c-1.899-3.01-4.165-5.456-5.831-8.655c-1.679-3.232-3.962-6.061-5.922-9.11c-0.276-0.432-0.773-0.398-1.087-0.157c-0.169,0.038-0.328,0.141-0.439,0.338c-1.715,3.058-3.551,6.043-5.34,9.057c-1.745,2.933-3.185,6.149-5.045,8.982c-0.261,0.398-0.067,0.779,0.255,0.958c0.085,0.094,0.194,0.17,0.361,0.198c0.317,0.055,0.64,0.113,0.968,0.176c0.325,0.061,0.658,0.126,0.995,0.194c8.252,2.577,19.237-0.221,19.628-0.129c0.345-0.203,0.684-0.429,1.014-0.677c0.085-0.064,0.146-0.139,0.194-0.217';
    }

    return path;
    this.cdr.detectChanges();
  }

  tree6(position: number, active: boolean) {
    let path: string = '';
    if (position === 1) {
      path =
        'M270.56,233.849c-0.276-1.593-0.026-3.263-0.216-4.874c-0.102-0.855-0.538-1.014-1.356-1.073c-1.326-0.096-2.825-0.282-4.112,0.114c-0.23,0.071-0.344,0.252-0.367,0.482c-0.011,0.122-0.034,0.244-0.049,0.366c-0.017,0.021-0.037,0.034-0.052,0.061c-0.463,0.832-0.352,2.16-0.471,3.079c-0.129,0.985-0.707,2.577-0.101,3.523c0.637,0.993,2.445,0.8,3.414,0.823c0.998,0.024,2.209,0.376,3.103-0.204z';
      if (active) path = path.replace('M270.56,233.849', 'M95.255,131.632');
    } else if (position === 2) {
      path =
        'M275.191,210.489c-1.31-2.076-2.872-3.762-4.02-5.967c-1.158-2.228-2.732-4.178-4.083-6.281c-0.19-0.297-0.533-0.274-0.75-0.107c-0.116,0.025-0.226,0.097-0.302,0.233c-1.183,2.108-2.448,4.166-3.683,6.244c-1.202,2.022-2.194,4.239-3.477,6.193c-0.18,0.274-0.046,0.536,0.176,0.66c0.059,0.064,0.135,0.118,0.249,0.137c0.219,0.038,0.441,0.078,0.667,0.121c0.226,0.042,0.454,0.087,0.687,0.134c5.688,1.776,13.263-0.152,13.531-0.089c0.238-0.14,0.472-0.295,0.699-0.466c0.059-0.044,0.101-0.096,0.134-0.149z';
      if (active) path = path.replace('M275.191,210.489', 'M99.887,108.272');
    } else if (position === 3) {
      path =
        'M277.074,218.759c-1.611-2.554-3.534-4.63-4.947-7.344c-1.425-2.743-3.362-5.143-5.025-7.73c-0.234-0.367-0.656-0.337-0.922-0.133c-0.144,0.032-0.278,0.12-0.373,0.287c-1.455,2.594-3.013,5.127-4.531,7.685c-1.48,2.489-2.702,5.218-4.28,7.622c-0.222,0.337-0.058,0.661,0.216,0.813c0.072,0.08,0.165,0.145,0.307,0.169c0.269,0.046,0.543,0.096,0.821,0.149c0.276,0.052,0.559,0.107,0.845,0.165c7.002,2.187,16.323-0.187,16.654-0.11c0.293-0.172,0.58-0.364,0.86-0.574c0.072-0.054,0.124-0.118,0.165-0.184z';
      if (active) path = path.replace('M277.074,218.759', 'M101.77,116.541');
    } else {
      path =
        'M278.867,227.749c-1.899-3.01-4.165-5.456-5.831-8.655c-1.679-3.232-3.962-6.061-5.922-9.11c-0.276-0.432-0.773-0.398-1.087-0.157c-0.169,0.038-0.328,0.141-0.439,0.338c-1.715,3.058-3.551,6.043-5.34,9.057c-1.745,2.933-3.184,6.149-5.045,8.982c-0.261,0.398-0.067,0.779,0.255,0.958c0.085,0.094,0.194,0.17,0.361,0.198c0.317,0.055,0.64,0.113,0.968,0.176c0.325,0.061,0.658,0.126,0.995,0.194c8.252,2.577,19.237-0.221,19.628-0.129c0.345-0.203,0.684-0.429,1.014-0.677c0.085-0.064,0.146-0.139,0.194-0.217z';
      if (active) path = path.replace('M278.867,227.749', 'M103.563,125.532');
    }

    return path;
    this.cdr.detectChanges();
  }

  tree5(position: number, active: boolean) {
    let path: string = '';
    if (position === 1) {
      path =
        'M96.527,296.008c-0.276-1.594-0.026-3.264-0.216-4.875c-0.102-0.855-0.538-1.014-1.356-1.072c-1.326-0.097-2.825-0.283-4.112,0.113c-0.23,0.07-0.344,0.252-0.367,0.483c-0.011,0.122-0.034,0.243-0.049,0.365c-0.017,0.021-0.037,0.034-0.052,0.06c-0.463,0.832-0.352,2.16-0.471,3.079c-0.129,0.985-0.707,2.577-0.101,3.522c0.637,0.993,2.445,0.8,3.414,0.823c0.998,0.025,2.209,0.376,3.104-0.204z';
    } else if (position === 2) {
      path =
        'M101.159,272.647c-1.31-2.075-2.872-3.762-4.02-5.968c-1.158-2.228-2.732-4.178-4.083-6.28c-0.19-0.298-0.533-0.274-0.75-0.107c-0.116,0.025-0.226,0.097-0.302,0.233c-1.183,2.107-2.448,4.166-3.683,6.243c-1.202,2.022-2.194,4.239-3.478,6.192c-0.18,0.275-0.046,0.537,0.176,0.66c0.059,0.064,0.135,0.117,0.249,0.137c0.219,0.038,0.441,0.078,0.667,0.121s0.454,0.088,0.687,0.134c5.688,1.776,13.263-0.151,13.531-0.089c0.238-0.141,0.472-0.296,0.699-0.467c0.059-0.044,0.101-0.096,0.134-0.149z';
    } else if (position === 3) {
      path =
        'M103.042,280.917c-1.611-2.554-3.534-4.63-4.947-7.345c-1.425-2.742-3.362-5.143-5.025-7.73c-0.234-0.366-0.656-0.337-0.922-0.133c-0.144,0.032-0.278,0.12-0.373,0.287c-1.455,2.595-3.013,5.128-4.531,7.686c-1.48,2.488-2.702,5.217-4.28,7.621c-0.222,0.338-0.058,0.661,0.216,0.813c0.072,0.08,0.165,0.145,0.307,0.169c0.27,0.046,0.543,0.097,0.821,0.149c0.276,0.051,0.559,0.106,0.845,0.164c7.002,2.187,16.323-0.188,16.654-0.109c0.293-0.172,0.58-0.364,0.86-0.574c0.072-0.055,0.124-0.118,0.165-0.184z';
    } else {
      path =
        'M104.835,289.908c-1.899-3.011-4.165-5.457-5.831-8.656c-1.679-3.233-3.962-6.061-5.922-9.109c-0.276-0.433-0.773-0.398-1.087-0.157c-0.169,0.038-0.328,0.142-0.439,0.339c-1.715,3.057-3.551,6.043-5.34,9.057c-1.745,2.933-3.184,6.148-5.045,8.982c-0.261,0.397-0.067,0.778,0.255,0.957c0.085,0.094,0.194,0.17,0.361,0.199c0.317,0.055,0.64,0.113,0.968,0.176c0.325,0.061,0.658,0.125,0.995,0.193c8.252,2.576,19.237-0.221,19.628-0.129c0.345-0.203,0.684-0.43,1.014-0.678c0.085-0.063,0.146-0.139,0.194-0.217z';
    }

    return path;
    this.cdr.detectChanges();
  }

  setAnimation(active: boolean, target: string) {
    let el: ElementRef | null = null;

    if (target === 'tree1') el = this.tree1El;
    if (target === 'tree2') el = this.tree2El;
    if (target === 'tree3') el = this.tree3El;
    if (target === 'tree4') el = this.tree4El;
    if (target === 'tree5') el = this.tree5El;
    if (target === 'tree6') el = this.tree6El;

    if (!active) {
      this.renderer.addClass(el!.nativeElement, 'shake');
      setTimeout(() => {
        this.renderer.removeClass(el!.nativeElement, 'shake');
        setTimeout(() => {
          this.renderer.addClass(el!.nativeElement, 'scale');

          if (target === 'tree2')
            this.renderer.addClass(el!.nativeElement, 'matrix-tree-2');
          else if (target === 'tree5')
            this.renderer.addClass(el!.nativeElement, 'matrix-tree-5');
          else if (target === 'tree6')
            this.renderer.addClass(el!.nativeElement, 'matrix-tree-6');
        }, 50);
      }, 2000);
    }

    this.cdr.detectChanges();
  }
}
